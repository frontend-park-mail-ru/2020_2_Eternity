// ---------------------------------------
// TEXT DEFINITIONS
// ---------------------------------------
$light: 'light';
$dark: 'dark';
$font-color--primary: 'font-color--primary';
$font-color--white: 'font-color--white';
$font-color--secondary: 'font-color--white';

// ---------------------------------------
// THEMES
// ---------------------------------------
$themes: (
        light: (
                primary: #fafafa,
                secondary: #fefefe,
                accent: #e0e0e0,
                font-color--primary: #111111,
                font-color--white: #fff,
                font-color--secondary: #9e9e9e,
        ),
        dark: (
                primary: #1f2128,
                secondary: #242731,
                accent: #2a2f3e,
                font-color--primary: #cadae5,
                font-color--white: #fafafa,
                font-color--secondary: #9e9e9e,
        )
);
@function compose-colors-var($color-key) {
  @return '--color-#{$color-key}';
}

@function color-get($palette, $color-key) {
  @return map-get(map-get($themes, $palette), $color-key);
}


:root {
  @each $key, $value in map-get($themes, 'light') {
    #{compose-colors-var($key)}: #{$value};
  }
}

@media (prefers-color-scheme: dark) {
  :root {
    @each $key, $value in map-get($themes, 'dark') {
      #{compose-colors-var($key)}: #{$value};
    }

    img {
      filter: grayscale(30%);
      transition: filter .2s ease;
    }
  }
}
:root[data-theme='dark'] {
  @each $key, $value in map-get($themes, 'dark') {
    #{compose-colors-var($key)}: #{$value};
  }

  img {
    filter: grayscale(30%);
    transition: filter .3s ease-in-out;
    //filter: brightness(.8) contrast(1.2);
  }
}


$color-placeholder: 'THEMECOLOR';
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if not $index {
    @return $string;
  }
  @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
}


@mixin color-assign($property, $color-key, $additionalProperties: '') {
  $fallback: #{color-get('light', $color-key)};
  $var: var(#{compose-colors-var($color-key)});

  #{$property}: if(str-length($additionalProperties) == 0, $fallback, #{str-replace($additionalProperties, $color-placeholder, $fallback)});
  #{$property}: if(str-length($additionalProperties) == 0, $var, #{str-replace($additionalProperties, $color-placeholder, $var)});
}